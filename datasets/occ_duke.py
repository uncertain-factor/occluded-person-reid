# encoding: utf-8
"""
@author:  liaoxingyu
@contact: liaoxingyu2@jd.com
"""

import glob
import re
import urllib
import zipfile

import os.path as osp

from utils.iotools import mkdir_if_missing
from .bases import BaseImageDataset


class OCC_DukeMTMCreID(BaseImageDataset):
    """
    DukeMTMC-reID
    Reference:
    1. Ristani et al. Performance Measures and a Data Set for Multi-Target, Multi-Camera Tracking. ECCVW 2016.
    2. Zheng et al. Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro. ICCV 2017.
    URL: https://github.com/layumi/DukeMTMC-reID_evaluation

    Dataset statistics:
    # identities: 1404 (train + query)
    # images:16522 (train) + 2228 (query) + 17661 (gallery)
    # cameras: 8
    """
    dataset_dir = 'occ_duke'

    def __init__(self, root='', verbose=True, pid_begin=0, **kwargs):
        # 获取数据集的文件路径：
        super(OCC_DukeMTMCreID, self).__init__()
        self.dataset_dir = osp.join(root, self.dataset_dir)
        self.dataset_url = 'http://vision.cs.duke.edu/DukeMTMC/data/misc/DukeMTMC-reID.zip'  # 无需用到
        self.train_dir = osp.join(self.dataset_dir, 'Occluded_Duke/bounding_box_train')
        self.query_dir = osp.join(self.dataset_dir, 'Occluded_Duke/query')
        self.gallery_dir = osp.join(self.dataset_dir, 'Occluded_Duke/bounding_box_test')
        self.pid_begin = pid_begin

        self._download_data()  # 省略
        self._check_before_run()  # 判断数据集是否存在

        # 创建训练集，测试集，查询集，展示集的数据集对象，其中train数据集的行人id被重置
        train = self._process_dir(self.train_dir, relabel=True)
        query = self._process_dir(self.query_dir, relabel=False)
        gallery = self._process_dir(self.gallery_dir, relabel=False)

        # 输出具体日志
        if verbose:
            print("=> DukeMTMC-reID loaded")
            self.print_dataset_statistics(train, query, gallery)

        self.train = train
        self.query = query
        self.gallery = gallery
        # 统计数据集的行人id数，图像总数，采用相机数，通道数（为1）
        self.num_train_pids, self.num_train_imgs, self.num_train_cams, self.num_train_vids = self.get_imagedata_info(
            self.train)
        self.num_query_pids, self.num_query_imgs, self.num_query_cams, self.num_query_vids = self.get_imagedata_info(
            self.query)
        self.num_gallery_pids, self.num_gallery_imgs, self.num_gallery_cams, self.num_gallery_vids = self.get_imagedata_info(
            self.gallery)

    # 从网上下载数据集，若目录中已存在，则直接返回
    def _download_data(self):
        if osp.exists(self.dataset_dir):
            print("This dataset has been downloaded.")
            return

        print("Creating directory {}".format(self.dataset_dir))
        mkdir_if_missing(self.dataset_dir)
        fpath = osp.join(self.dataset_dir, osp.basename(self.dataset_url))

        print("Downloading DukeMTMC-reID dataset")
        urllib.request.urlretrieve(self.dataset_url, fpath)

        print("Extracting files")
        zip_ref = zipfile.ZipFile(fpath, 'r')
        zip_ref.extractall(self.dataset_dir)
        zip_ref.close()

    # 检查路径文件是否存在
    def _check_before_run(self):
        """Check if all files are available before going deeper"""
        if not osp.exists(self.dataset_dir):
            raise RuntimeError("'{}' is not available".format(self.dataset_dir))
        if not osp.exists(self.train_dir):
            raise RuntimeError("'{}' is not available".format(self.train_dir))
        if not osp.exists(self.query_dir):
            raise RuntimeError("'{}' is not available".format(self.query_dir))
        if not osp.exists(self.gallery_dir):
            raise RuntimeError("'{}' is not available".format(self.gallery_dir))

    # 创建数据集，item为（文件路径，行人id，相机id，1），其中行人id可能被重置过
    def _process_dir(self, dir_path, relabel=False):
        img_paths = glob.glob(osp.join(dir_path, '*.jpg'))  # 获取所有图像路径
        pattern = re.compile(r'([-\d]+)_c(\d)')  # 创建正则表达式 匹配图像名：0001_c2_f0046182.jpg
        # 对于所有图像，提取出人物id，转换为int类型然后装进set集合中，最后创建id和label的映射{key：pid，value：label}
        pid_container = set()
        for img_path in img_paths:
            pid, _ = map(int, pattern.search(img_path).groups())
            pid_container.add(pid)
        pid2label = {pid: label for label, pid in enumerate(pid_container)}

        dataset = []
        cam_container = set()
        # 创建数据集，item为（文件路径，行人id，相机id，1）
        for img_path in img_paths:
            pid, camid = map(int, pattern.search(img_path).groups())
            assert 1 <= camid <= 8  # 相机id必须在1-8之间，否则抛出异常
            camid -= 1  # index starts from 0
            if relabel: pid = pid2label[pid]  # 将pid转化为label
            dataset.append((img_path, self.pid_begin + pid, camid, 1))
            cam_container.add(camid)
        print(cam_container, 'cam_container')
        return dataset
